import cv2
import os
import numpy as np

def color(photo,klasa):

    # Convert BGR (OpenCV default) to RGB
    image_rgb = cv2.cvtColor(photo, cv2.COLOR_BGR2RGB)

    # Define RGB ranges for colors (with multiple ranges for the same color)
    color_ranges = {
        "red": [
            [(10, 0, 0), (255, 0, 0)],
            [(140, 48, 78), (168, 74, 102)],
            [(141, 61, 76), (169, 86, 100)],
            [(137, 82, 98), (164, 107, 123)],
            [(176, 96, 122), (204, 122, 148)],
            [(192, 102, 118), (221, 128, 144)],
            [(177, 86, 108), (206, 112, 133)],
            [(157, 82, 102), (185, 107, 127)],
            [(148, 129, 96), (175, 155, 121)],
            [(177, 147, 111), (205, 174, 137)],
            [(175, 143, 109), (203, 169, 134)],
            [(134, 0, 4), (164, 37, 27)],
            [(149, 0, 0), (180, 20, 21)],
            [(120, 54, 46), (148, 78, 68)],
            [(206, 30, 45), (238, 66, 68)],
            [(164, 41, 44), (194, 69, 66)],
            [(87, 55, 39), (112, 78, 61)],
            [(139, 90, 84), (166, 115, 108)],
            [(155, 125, 116), (182, 151, 142)],
            [(118, 88, 77), (144, 112, 101)],
            [(168, 116, 82), (196, 142, 106)],
            [(191, 111, 82), (221, 137, 106)],
            [(165, 90, 63), (194, 115, 87)],
            [(210, 91, 124), (240, 118, 150)],
            [(209, 140, 145), (238, 167, 172)],
            [(211, 123, 137), (240, 150, 163)],
            [(194, 52, 107), (224, 82, 132)],
            [(194, 78, 98), (224, 105, 123)],
            [(164, 17, 81), (194, 54, 105)],
            [(76, 121, 94), (101, 147, 119)],
            [(69, 170, 124), (98, 198, 150)],
            [(70, 119, 76), (95, 145, 100)],
            [(156, 150, 110), (183, 177, 135)],
            [(166, 188, 128), (194, 216, 154)],
            [(109, 108, 80), (135, 133, 104)],
            [(113, 142, 96), (139, 168, 121)],
            [(55, 143, 106), (83, 170, 131)],
            [(162, 89, 82), (190, 114, 106)],
            [(151, 73, 52), (180, 98, 75)],
            [(136, 76, 50), (164, 100, 73)],
            [(122, 117, 88), (148, 143, 113)],
            [(139, 135, 106), (166, 161, 131)],
            [(65, 89, 61), (89, 114, 84)],
            [(89, 155, 124), (115, 182, 150)]
        ],
        "yellow": [
            [(194, 199, 0), (255, 255, 116)],
            [(215, 220, 114), (244, 248, 141)],
            [(186, 216, 108), (215, 244, 135)],
            [(152, 208, 97), (180, 236, 123)],
            [(171, 215, 89), (200, 244, 116)],
            [(168, 208, 90), (196, 236, 117)],
            [(225, 221, 119), (255, 249, 146)],
            [(142, 149, 65), (169, 176, 90)],
            [(160, 163, 61), (188, 190, 87)],
            [(141, 148, 40), (169, 175, 67)],
            [(152, 169, 74), (180, 196, 100)],
            [(186, 172, 0), (216, 199, 11)],
            [(146, 139, 23), (174, 165, 53)],
            [(216, 195, 0), (247, 223, 4)],
            [(160, 145, 0), (189, 171, 42)],
            [(218, 217, 95), (248, 245, 122)],
            [(198, 194, 60), (227, 222, 88)],
            [(139, 138, 49), (167, 164, 74)],
            [(74, 113, 30), (100, 139, 55)],
            [(74, 122, 26), (100, 148, 52)],
            [(74, 136, 80), (100, 163, 105)],
            [(165, 208, 116), (193, 236, 142)],
            [(145, 184, 106), (172, 212, 132)],
            [(123, 182, 105), (150, 210, 131)],
            [(74, 113, 30), (100, 139, 55)],
            [(74, 122, 26), (100, 148, 52)],
            [(59, 103, 27), (84, 128, 51)],
            [(181, 217, 142), (209, 246, 169)],
            [(189, 217, 119), (218, 246, 146)],
            [(123, 182, 105), (150, 210, 131)],
            [(94, 169, 112), (121, 197, 138)],
            [(76, 151, 101), (103, 178, 126)],
            [(129, 142, 70), (156, 168, 95)],
            [(171, 161, 46), (200, 188, 73)],
            [(168, 152, 53), (197, 179, 79)],
            [(155, 146, 63), (183, 172, 88)],
            [(143, 146, 75), (170, 172, 100)],
            [(160, 153, 41), (188, 180, 68)],
            [(177, 159, 43), (206, 186, 71)],
            [(167, 157, 49), (196, 184, 76)],
            [(173, 158, 41), (202, 185, 69)],
            [(152, 138, 62), (180, 164, 87)],
            [(180, 163, 41), (209, 190, 69)],
            [(162, 149, 63), (190, 176, 88)],
            [(172, 162, 38), (201, 189, 67)],
            [(163, 149, 46), (192, 175, 72)],
            [(199, 174, 0), (229, 201, 45)],
            [(174, 210, 116), (202, 238, 142)],
            [(221, 223, 150), (250, 252, 177)],
            [(190, 217, 125), (218, 245, 152)],
            [(137, 184, 109), (164, 212, 135)],
            [(116, 181, 110), (143, 209, 136)],
            [(147, 203, 119), (175, 231, 145)]

        ],
        "white": [
            [(249, 249, 249), (255, 255, 255)],
            [(105, 213, 189), (134, 242, 217)],
            [(156, 219, 207), (184, 248, 235)],
            [(156, 219, 207), (184, 248, 235)],
            [(219, 223, 222), (247, 252, 251)],
            [(180, 222, 214), (208, 251, 242)],
            [(192, 223, 216), (220, 252, 244)],
            [(200, 223, 218), (228, 252, 246)],
            [(151, 127, 112), (178, 153, 137)],
            [(111, 117, 94), (136, 143, 119)],
            [(112, 85, 64), (138, 109, 87)],
            [(126, 90, 77), (153, 115, 101)],
            [(178, 147, 133), (206, 174, 159)],
            [(195, 151, 145), (223, 178, 172)],
            [(205, 163, 166), (233, 190, 193)],
            [(143, 102, 101), (170, 127, 126)],
            [(152, 133, 124), (179, 159, 150)],
            [(158, 111, 116), (185, 137, 142)],
            [(216, 188, 193), (245, 216, 221)],
            [(215, 160, 167), (244, 187, 194)],
            [(113, 214, 192), (142, 243, 220)],
            [(145, 149, 113), (172, 176, 139)],
            [(137, 136, 102), (163, 162, 127)],
            [(49, 206, 204), (89, 235, 232)],
            [(60, 134, 95), (87, 161, 120)],
            [(39, 206, 146), (80, 235, 173)],
            [(60, 208, 160), (95, 237, 187)],
            [(103, 114, 83), (128, 140, 107)]
        ]
    }

    # Create combined masks for each color
    masks = {}
    for color, ranges in color_ranges.items():
        mask_combined = None
        for lower, upper in ranges:
            lower_bound = np.array(lower, dtype=np.uint8)
            upper_bound = np.array(upper, dtype=np.uint8)
            mask = cv2.inRange(image_rgb, lower_bound, upper_bound)
            
            # Combine masks for multiple ranges (bitwise OR)
            if mask_combined is None:
                mask_combined = mask
            else:
                mask_combined = cv2.bitwise_or(mask_combined, mask)
        
        masks[color] = mask_combined

    # Apply the masks to extract the regions for each color
    color_regions = {}
    for color, mask in masks.items():
        color_regions[color] = cv2.bitwise_and(image_rgb, image_rgb, mask=mask)

    # Count the number of pixels for each color mask
    color_pixel_count = {color: cv2.countNonZero(mask) for color, mask in masks.items()}

    # Determine the dominant color
    dominant_color = max(color_pixel_count, key=color_pixel_count.get)

    return dominant_color
